(***************************************************)
(*         Scilla version  Declaration             *)
(***************************************************)
scilla_version 0
(***************************************************)
(*         Contract Name  Declaration              *)
(***************************************************)

contract StringLiterals
(***************************************************)
(*               Address  Declaration              *)
(***************************************************)
(owner: ByStr20)
  
(***************************************************)
(*               Mutable Fields                    *)
(***************************************************)
field currentQuestionId: Int32 = Int32 0

field equalsCheck: Bool = False
field concatCheck: String = ""
field substrCheck: String = ""
field toStringCheck: String = ""
field strlenCheck: Uint32 = Uint32 0
field strrevCheck: String = ""

(***************************************************)
(*          StringequalCheck Transition           *)
(***************************************************)

transition StringequalCheck(paramA:String, paramB: String)
accept;
val  = builtin eq paramA paramB;
equalsCheck:=val
end

(***************************************************)
(*          StringConcatCheck Transition           *)
(***************************************************)

transition StringConcatCheck(paramA:String, paramB: String)
accept;
val  = builtin concat paramA paramB;
concatCheck:=val
end

(***************************************************)
(*            StringSubstring Transition           *)
(***************************************************)
transition StringSubstring(paramA:String,idx:Uint32,length: Uint32)
accept;
val  = builtin substr paramA idx length;
substrCheck:=val
end

(***************************************************)
(*             Stringtostring Transition           *)
(***************************************************)

transition Stringtostring(paramA:Int32)
accept;
val  = builtin to_string paramA;
toStringCheck:=val
end

(***************************************************)
(*               Stringstrlen Transition           *)
(***************************************************)
transition Stringstrlen(paramA:String)
accept;
val  = builtin strlen paramA;
strlenCheck:=val
end